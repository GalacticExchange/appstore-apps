require 'rake'
require 'rspec/core/rake_task'

task :spec    => 'spec:all'
task :default => :spec

namespace :spec do
  targets = []
  Dir.glob('./spec/*').each do |dir|
    next unless File.directory?(dir)
    target = File.basename(dir)
    target = "_#{target}" if target == "default"
    targets << target
  end

  task :all     => targets
  task :default => :all

  targets.each do |target|
    original_target = target == "_default" ? target[1..-1] : target
    desc "Run serverspec tests to #{original_target}"
    RSpec::Core::RakeTask.new(target.to_sym) do |t|
      ENV['TARGET_HOST'] = original_target
      t.pattern = "spec/#{original_target}/*_spec.rb"
    end
  end
end

container_name = "rocana"

desc "Build container image locally"
task :build do
    sh 'docker rm $(docker stop $(docker ps -a -q --filter ancestor=<image-name> --format="{{.ID}}")); true'
    sh "docker rm -f chef-converge.temp-rocana; true"
    sh 'docker rmi rocana; true'
    sh "docker rm -f temp-rocana; true"
    sh "chef-client  -z build.rb -j config_build.json"
end

desc "Export rocana container"
task :export do
    sh "docker rm -f temp-rocana; true"
    sh "docker run -d --name=temp-rocana --privileged=true rocana   bash"
    sh "docker exec -t temp-rocana rm -rf /var/chef/backup/; true"
    sh "docker exec -t temp-rocana hardlink  -t /opt"
    sh "rm -f /vagrant/docker/rocana.tar /vagrant/docker/rocana.tar.gz | true "
    sh "docker export -o /vagrant/docker/rocana.tar temp-rocana"
    sh "gzip /vagrant/docker/rocana.tar"
    sh "docker rm -f temp-rocana; true"
end

desc "Destroy image"
task :destroy do
    sh "docker rm -f chef-converge.temp-rocana; true"
    sh "docker rm -f chef-converge.rocana; true"
    sh "docker rm -f temp-rocana; true"
    sh "docker rm -f rocana; true"
    sh "docker rmi temp-rocana;true"
    sh "docker rmi rocana; true"
    sh "chef-client -z destroy.rb -j config_build.json"
end

